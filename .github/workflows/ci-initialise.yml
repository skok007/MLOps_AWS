# This workflow runs automated tests whenever code is pushed to any branch
name: CI Pipeline

# Define when the workflow should run
on:
  push:
    branches:
      - '*'  # Run on push to any branch
  workflow_dispatch:  # Manual trigger only

# Define environment variables needed for the application
env:
  # Basic application settings
  ENVIRONMENT: test
  APP_NAME: rag-app
  DEBUG: "true"
  
  # Database connection settings
  POSTGRES_HOST: localhost
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_PORT: 5432
  
  # API endpoints and paths
  ARXIV_API_URL: https://export.arxiv.org/api/query
  DATA_PATH: ./data
  
  # Model generation parameters
  TEMPERATURE: "0.7"
  TOP_P: "0.9"
  MAX_TOKENS: "1000"
  
  # Opik API settings (for AI model evaluation)
  OPIK_API_KEY: ${{ secrets.OPIK_API_KEY }}
  OPIK_WORKSPACE: ${{ secrets.OPIK_WORKSPACE }}
  OPIK_ENVIRONMENT: test
  
  # OpenAI settings
  OPENAI_MODEL: gpt-3.5-turbo
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
  # Poetry version to use
  POETRY_VERSION: "1.8.2"

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Use Python 3.12 as required by the project
          cache: 'pip'  # Enable pip caching for faster dependency installation
          
      # Step 3: Cache Poetry installation
      - name: Cache Poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}
          
      # Step 4: Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-deps-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-deps-${{ runner.os }}-
          
      # Step 5: Install Poetry package manager
      - name: Install Poetry
        run: |
          # Install specific version of Poetry
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          # Configure Poetry to create virtualenvs in the project directory
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          
      # Step 6: Install project dependencies and repository
      - name: Install dependencies and repository
        working-directory: ./rag-app
        run: |
          echo "Installing dependencies and repository..."
          poetry install --no-interaction
          echo "Installation complete!"
      
      # Step 7: Verify workspace exists and list directory contents
      - name: Verify workspace and list directory
        working-directory: ./rag-app
        run: |
          echo "Listing directory contents:"
          ls -la
          echo "Checking for .venv directory:"
          if [ -d ".venv" ]; then
            echo ".venv directory found"
            ls -la .venv
          else
            echo ".venv directory not found, creating it"
            # Create the .venv directory
            mkdir -p .venv
            # Copy the .env file to .venv if it exists
            if [ -f ".env" ]; then
              echo "Copying .env file to .venv directory"
              cp .env .venv/
            fi
            # Create a dummy file to ensure the directory is not empty
            touch .venv/dummy.txt
            echo "Created .venv directory for artifact upload"
          fi
      
      # Step 8: Upload workspace for other jobs
      - name: Upload workspace
        uses: actions/upload-artifact@v4
        with:
          name: poetry-workspace
          path: rag-app/.venv
          retention-days: 1
      
      # Step 9: Verify artifact was uploaded
      - name: Verify artifact upload
        run: |
          echo "Verifying artifact upload..."
          ls -la rag-app/.venv
          echo "Artifact verification complete"
      
      # Step 10: List available artifacts
      - name: List artifacts
        run: |
          echo "Listing available artifacts..."
          ls -la ${{ github.workspace }}/.github/workflows
          echo "Artifact listing complete"

  setup-database:
    name: Setup Database
    needs: setup
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      # Debug step to list available artifacts
      - name: List available artifacts
        run: |
          echo "Listing available artifacts..."
          ls -la ${{ github.workspace }}/.github/workflows
          echo "Artifact listing complete"
      
      # Create directory for artifact download
      - name: Create directory for artifact
        run: |
          mkdir -p rag-app/.venv
          echo "Created directory for artifact download"
      
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: poetry-workspace
          path: rag-app/.venv
      
      - name: Verify workspace download
        run: |
          echo "Verifying workspace download..."
          ls -la rag-app/.venv
          echo "Workspace verification complete"
      
      # Reinstall Poetry if needed
      - name: Reinstall Poetry if needed
        working-directory: ./rag-app
        run: |
          if [ ! -f ".venv/bin/poetry" ] && [ ! -f ".venv/Scripts/poetry" ]; then
            echo "Poetry not found in virtual environment, reinstalling..."
            curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
          else
            echo "Poetry found in virtual environment"
          fi

  test:
    name: Run Tests
    needs: [setup, setup-database]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      # Create directory for artifact download
      - name: Create directory for artifact
        run: |
          mkdir -p rag-app/.venv
          echo "Created directory for artifact download"
      
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: poetry-workspace
          path: rag-app/.venv
      
      # Reinstall Poetry if needed
      - name: Reinstall Poetry if needed
        working-directory: ./rag-app
        run: |
          if [ ! -f ".venv/bin/poetry" ] && [ ! -f ".venv/Scripts/poetry" ]; then
            echo "Poetry not found in virtual environment, reinstalling..."
            curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
          else
            echo "Poetry found in virtual environment"
          fi
      
      # Step 9: Run the test suite
      - name: Run tests
        working-directory: ./rag-app
        run: |
          poetry run pytest tests/ -v --junitxml=test-results.xml  # Run tests and generate XML report
          
      # Step 10: Upload test results as artifacts
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()  # Run even if tests fail
        with:
          name: test-results
          path: rag-app/test-results.xml

  lint:
    name: Lint Code
    needs: [setup, setup-database]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      # Create directory for artifact download
      - name: Create directory for artifact
        run: |
          mkdir -p rag-app/.venv
          echo "Created directory for artifact download"
      
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: poetry-workspace
          path: rag-app/.venv
      
      # Reinstall Poetry if needed
      - name: Reinstall Poetry if needed
        working-directory: ./rag-app
        run: |
          if [ ! -f ".venv/bin/poetry" ] && [ ! -f ".venv/Scripts/poetry" ]; then
            echo "Poetry not found in virtual environment, reinstalling..."
            curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
            poetry config virtualenvs.create true
            poetry config virtualenvs.in-project true
            poetry install --no-interaction
          else
            echo "Poetry found in virtual environment"
          fi
      
      - name: Run linting
        working-directory: ./rag-app
        run: |
          poetry run flake8 server/src tests
          poetry run black --check server/src tests
          poetry run isort --check-only server/src tests

  build:
    name: Build Docker Images
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build PostgreSQL image
        working-directory: ./rag-app/deploy/docker/postgres
        run: |
          docker build -t rag-app-postgres:latest -f pgvector2.Dockerfile .
      
      - name: Build application image
        working-directory: ./rag-app
        run: |
          docker build -t rag-app:latest -f Dockerfile .

