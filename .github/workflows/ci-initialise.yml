# This workflow runs automated tests whenever code is pushed to any branch
name: CI Initialise

# Define when the workflow should run
on:
  push:
    branches:
      - '*'  # Run on push to any branch
  workflow_dispatch:  # Manual trigger only

jobs:
  test:
    # Run on the latest Ubuntu runner
    runs-on: ubuntu-latest
    
    # Add PostgreSQL service
    services:
      postgres:
        image: ankane/pgvector:latest  # Use pgvector image instead of standard postgres
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    # Define environment variables needed for the application
    # These variables are used by the application's Settings class
    env:
      # Basic application settings
      ENVIRONMENT: test
      APP_NAME: rag-app
      DEBUG: "true"
      
      # Database connection settings
      POSTGRES_HOST: localhost
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_PORT: 5432
      
      # API endpoints and paths
      ARXIV_API_URL: https://export.arxiv.org/api/query
      DATA_PATH: ./data
      
      # Model generation parameters
      TEMPERATURE: "0.7"
      TOP_P: "0.9"
      MAX_TOKENS: "1000"
      
      # Opik API settings (for AI model evaluation)
      OPIK_API_KEY: ${{ secrets.OPIK_API_KEY }}
      OPIK_WORKSPACE: ${{ secrets.OPIK_WORKSPACE }}
      OPIK_PROJECT_NAME: ${{ secrets.OPIK_PROJECT_NAME }}
      OPIK_ENVIRONMENT: test  # Add this to distinguish test environment
      
      # OpenAI settings
      OPENAI_MODEL: gpt-3.5-turbo
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      # Poetry version to use
      POETRY_VERSION: "1.8.2"
      
    steps:
      # Step 1: Check out the code
      - uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Use Python 3.12 as required by the project
          cache: 'pip'  # Enable pip caching for faster dependency installation
          
      # Step 3: Cache Poetry installation
      # This speeds up the workflow by reusing the Poetry installation
      - name: Cache Poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}
          
      # Step 4: Cache Poetry dependencies
      # This speeds up the workflow by reusing the virtual environment
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-deps-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-deps-${{ runner.os }}-
          
      # Step 5: Install Poetry package manager
      - name: Install Poetry
        run: |
          # Install specific version of Poetry
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          # Configure Poetry to create virtualenvs in the project directory
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          
      # Step 6: Install project dependencies
      - name: Install dependencies
        working-directory: ./rag-app
        run: poetry install --no-interaction --no-root  # Install dependencies without user interaction
          
      # Step 7: Install rag-app repository (demonstration)
      - name: Install rag-app repository
        run: |
          echo "Installing rag-app repository..."
          cd rag-app
          poetry install --no-interaction
          echo "Repository installation complete!"
          
      # Step 8: Run the test suite
      - name: Run tests
        working-directory: ./rag-app
        run: |
          poetry run pytest tests/ -v --junitxml=test-results.xml  # Run tests and generate XML report
          
      # Step 9: Upload test results as artifacts
      # This makes test results available even if tests fail
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()  # Run even if tests fail
        with:
          name: test-results
          path: rag-app/test-results.xml

