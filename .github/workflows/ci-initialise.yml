# This workflow runs automated tests whenever code is pushed to any branch
name: CI Pipeline

# Define when the workflow should run
on:
  push:
    branches:
      - 'main'  # Run on push to main branch only
      - 'develop'  # Run on push to develop branch
  pull_request:
    branches:
      - 'main'  # Run on pull requests to main branch
  workflow_dispatch:  # Manual trigger

# Define environment variables needed for the application
env:
  # Basic application settings
  ENVIRONMENT: test
  APP_NAME: rag-app
  DEBUG: "true"
  
  # Database connection settings (for testing only)
  POSTGRES_HOST: localhost
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_PORT: 5432
  
  # API endpoints and paths
  ARXIV_API_URL: https://export.arxiv.org/api/query
  DATA_PATH: ./data
  
  # Model generation parameters
  TEMPERATURE: "0.7"
  TOP_P: "0.9"
  MAX_TOKENS: "1000"
  
  # Opik API settings (for AI model evaluation)
  OPIK_API_KEY: ${{ secrets.OPIK_API_KEY }}
  OPIK_WORKSPACE: ${{ secrets.OPIK_WORKSPACE }}
  OPIK_ENVIRONMENT: test
  OPIK_PROJECT_NAME: rag-app-test
  
  # OpenAI settings
  OPENAI_MODEL: gpt-3.5-turbo
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
  # Poetry version to use
  POETRY_VERSION: "1.8.2"

jobs:
  ci:
    name: CI Pipeline
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          
      # Step 3: Cache Poetry installation and dependencies
      - name: Cache Poetry and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.local
            ~/.cache/pypoetry
            ./rag-app/.venv
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}-
          
      # Step 4: Install Poetry package manager
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          
      # Step 5: Install project dependencies
      - name: Install dependencies
        working-directory: ./rag-app
        run: |
          echo "Installing dependencies..."
          poetry install --no-interaction
          echo "Installation complete!"
      
      # Step 6: Initialize database and run tests
      - name: Initialize database and run tests
        working-directory: ./rag-app
        run: |
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          until poetry run python -c "import psycopg2; conn = psycopg2.connect(dbname='test_db', user='test_user', password='test_password', host='localhost'); conn.close()" 2>/dev/null; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up - executing tests"
          
          # Run tests with coverage
          poetry run pytest tests/ -v --junitxml=test-results.xml --cov=server --cov-report=xml
          
      # Step 7: Upload test results and coverage as artifacts
      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            rag-app/test-results.xml
            rag-app/coverage.xml
      
      # Step 13: Install linting tools - TEMPORARILY DISABLED
      # - name: Install linting tools
      #   working-directory: ./rag-app
      #   run: |
      #     echo "Installing linting tools..."
      #     poetry add --group dev flake8 black isort
      #     echo "Linting tools installation complete"
      
      # Step 14: Run linting - TEMPORARILY DISABLED
      # - name: Run linting
      #   working-directory: ./rag-app
      #   run: |
      #     poetry run flake8 server/src tests
      #     poetry run black --check server/src tests
      #     poetry run isort --check-only server/src tests
      
      # Step 15: Build Docker images - TEMPORARILY DISABLED
      # NOTE: Docker builds are disabled due to certificate access limitations.
      # The PostgreSQL image build requires Zscaler certificates which cannot be
      # shared in the public repository for security reasons.
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      
      # - name: Build PostgreSQL image
      #   working-directory: ./rag-app/deploy/docker/postgres
      #   run: |
      #     docker build -t rag-app-postgres:latest -f pgvector2.Dockerfile .
      
      # - name: Build application image
      #   working-directory: ./rag-app
      #   run: |
      #     docker build -t rag-app:latest -f Dockerfile .

