# This workflow runs automated tests whenever code is pushed to any branch
name: CI Pipeline

# Define when the workflow should run
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define environment variables needed for the application
env:
  # Basic application settings
  ENVIRONMENT: test
  APP_NAME: rag-app
  DEBUG: "true"
  
  # Database connection settings
  POSTGRES_HOST: localhost
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_PORT: 5432
  
  # API endpoints and paths
  ARXIV_API_URL: https://export.arxiv.org/api/query
  DATA_PATH: ./data
  
  # Model generation parameters
  TEMPERATURE: "0.7"
  TOP_P: "0.9"
  MAX_TOKENS: "1000"
  
  # Opik API settings (for AI model evaluation)
  OPIK_API_KEY: ${{ secrets.OPIK_API_KEY }}
  OPIK_WORKSPACE: ${{ secrets.OPIK_WORKSPACE }}
  OPIK_ENVIRONMENT: test
  OPIK_PROJECT_NAME: rag-app-test
  
  # OpenAI settings
  OPENAI_MODEL: gpt-3.5-turbo
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
  # Poetry version to use
  POETRY_VERSION: "1.8.2"

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: |
          cd rag-app/server
          poetry install

      # - name: Install linting tools
      #   run: |
      #     cd rag-app/server
      #     poetry add --group dev flake8 black isort

      - name: Wait for PostgreSQL
        run: |
          until PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c '\q'; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up - executing command"

      # - name: Run linting
      #   run: |
      #     cd rag-app/server
      #     poetry run flake8 src/
      #     poetry run black --check src/
      #     poetry run isort --check-only src/

      - name: Run tests
        run: |
          cd rag-app/server
          poetry run pytest tests/ -v
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPIK_API_KEY: ${{ secrets.OPIK_API_KEY }}
          OPIK_API_URL: ${{ secrets.OPIK_API_URL }}
          VECTOR_DIMENSION: 1536
          OPENAI_MODEL: gpt-4-turbo-preview

